import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.action_logger import ActionLogger
from handlers.user_handler import get_user_data, log_user_activity
import logging

logger = logging.getLogger(__name__)

action_logger = ActionLogger()

def load_excursions():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    file_path = 'data/price.xls'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
        
    print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ xls
        df = pd.read_excel(file_path, sheet_name='Sheet1', engine='xlrd')
        print("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–§–æ—Ç–æ', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä', '–í –Ω–∞–ª–∏—á–∏–∏']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        return None
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —ç–∫—Å–∫—É—Ä—Å–∏–π")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()}")
    
    return df

def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–∫—É—Ä—Å–∏–π"""
    df = load_excursions()
    if df is not None:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
        categories = sorted(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist())
        print(f"–ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        return categories
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_excursions_by_category(category):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    df = load_excursions()
    if df is not None:
        return df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category].to_dict('records')
    return []

def get_excursion_by_id(excursion_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    print(f"–ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å ID: {excursion_id}")
    
    df = load_excursions()
    if df is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö")
        return None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º excursion_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    excursion_id = str(excursion_id)
    print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞: {excursion_id}")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ –±–∞–∑–µ: {df['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'].tolist()}")
    
    # –ò—â–µ–º —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    excursion = df[df['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'].astype(str) == excursion_id]
    
    if excursion.empty:
        print(f"–≠–∫—Å–∫—É—Ä—Å–∏—è —Å ID {excursion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    print(f"–ù–∞–π–¥–µ–Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—è: {excursion.iloc[0]['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
    return excursion.iloc[0].to_dict()

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–∫—É—Ä—Å–∏–π"""
    user_data = get_user_data(update.effective_user)
    categories = get_categories()
    
    if not categories:
        await update.callback_query.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return
    
    action_logger.log_action(
        user_data=user_data,
        action="excursions_menu",
        action_type="menu_view"
    )
    
    keyboard = []
    for category in categories:
        keyboard.append([InlineKeyboardButton(f"üå¥ {category}", callback_data=f"category_{category}")])
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = "üå¥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–∫—Å–∫—É—Ä—Å–∏–π:"
    
    if update.callback_query:
        await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

async def show_excursions_list(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_activity(update, f"–æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    
    excursions = get_excursions_by_category(category)
    if not excursions:
        await query.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="excursions"),
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])
        )
        return
    
    message = f"üå¥ –≠–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    for excursion in excursions:
        message += f"‚Ä¢ {excursion['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    for excursion in excursions:
        keyboard.append([InlineKeyboardButton(
            f"üèî {excursion['–ù–∞–∑–≤–∞–Ω–∏–µ']}", 
            callback_data=f"excursion_{excursion['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω–∏–∑—É
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="excursions"),
        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.edit_text(message, reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(message, reply_markup=reply_markup)

async def show_excursion_info(update: Update, context: ContextTypes.DEFAULT_TYPE, excursion_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫—Å–∫—É—Ä—Å–∏–∏
    excursion = get_excursion_by_id(excursion_id)
    
    if not excursion:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_user_activity(update, f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é —Å ID {excursion_id}")
        
        await query.message.edit_text(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="excursions"),
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏
    log_user_activity(update, f"–æ—Ç–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏–∏ {excursion['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üèî {excursion['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n\n"
    message += f"üìù {excursion['–û–ø–∏—Å–∞–Ω–∏–µ']}\n\n"
    message += f"üí∞ –¶–µ–Ω–∞: {excursion['–¶–µ–Ω–∞']} ‚ÇΩ\n"
    
    if excursion['–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä'] == '–î–∞':
        message += "‚≠êÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è!\n"
    
    if excursion['–í –Ω–∞–ª–∏—á–∏–∏'] == '–î–∞':
        message += "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
    else:
        message += "‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"category_{excursion['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}")],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="excursions"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        ]
    ]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if excursion['–§–æ—Ç–æ'] and not pd.isna(excursion['–§–æ—Ç–æ']):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await query.message.reply_photo(
                photo=excursion['–§–æ—Ç–æ'],
                caption=message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–∫—Å–∫—É—Ä—Å–∏–π
            await query.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await query.message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    else:
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )