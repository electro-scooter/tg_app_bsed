import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from config import BOT_TOKEN, TELEGRAM_GROUP_LINK
from handlers.weather_handler import show_weather_menu, show_city_weather, show_forecast
from handlers.user_handler import request_phone_number, handle_contact, log_user_activity
from handlers.excursions_handler import show_categories, show_excursions_list, show_excursion_info, get_categories
from handlers.accommodation_handler import show_accommodation
from handlers.flights_handler import show_flights

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_main_menu():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üòé –ü–æ–≥–æ–¥–∞", callback_data="weather")
        ],
        [
            InlineKeyboardButton("üå¥ –ú–æ–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏", callback_data="excursions")
        ],
        [
            InlineKeyboardButton("üèñ –ñ–∏–ª—å—ë", callback_data="accommodation"),
            InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã", callback_data="flights")
        ],
        [
            InlineKeyboardButton("üé® –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã", callback_data="stickers")
        ],
        [
            InlineKeyboardButton("üåä –¢–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞", url=TELEGRAM_GROUP_LINK)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_welcome_message():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç–¥—ã—Ö—É –Ω–∞ –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–æ–º –ø–æ–±–µ—Ä–µ–∂—å–µ!

–ß—Ç–æ —è –º–æ–≥—É:
üå° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
üé´ –ü–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —ç–∫—Å–∫—É—Ä—Å–∏–π
üè® –ù–∞–π—Ç–∏ –∂–∏–ª—å—ë
‚úàÔ∏è –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:
"""

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (id: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_activity(update, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    welcome_message = get_welcome_message()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.callback_query:
        await update.callback_query.message.edit_text(welcome_message, reply_markup=get_main_menu())
    else:
        await update.message.reply_text(welcome_message, reply_markup=get_main_menu())

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (id: {user.id}) –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_activity(update, "–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é start –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await start_command(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    user = query.from_user
    button_name = data.replace('_', ' ').title()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (id: {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {button_name}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ CSV
    log_user_activity(update, f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {button_name}")
    
    try:
        if data == "start":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ
            if query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                await query.message.reply_text(
                    get_welcome_message(),
                    reply_markup=get_main_menu()
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await start_command(update, context)
        elif data == "stickers":
            message = "üé® –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —É –Ω–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã!\n\n"
            message += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ —Å–≤–æ–π Telegram:"
            
            keyboard = [
                [InlineKeyboardButton("üé® –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã", url="https://t.me/addstickers/blacksea365")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
            ]
            await query.message.edit_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
        elif data == "excursions":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ
            if query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                categories = get_categories()
                keyboard = []
                for category in categories:
                    keyboard.append([InlineKeyboardButton(f"üå¥ {category}", callback_data=f"category_{category}")])
                keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
                
                await query.message.reply_text(
                    "üå¥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–∫—Å–∫—É—Ä—Å–∏–π:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await show_categories(update, context)
        elif data == "weather":
            await show_weather_menu(update, context)
        elif data == "accommodation":
            await show_accommodation(update, context)
        elif data == "flights":
            await show_flights(update, context)
        elif data.startswith("category_"):
            category = data.replace("category_", "")
            await show_excursions_list(update, context, category)
        elif data.startswith("excursion_"):
            excursion_id = data.replace("excursion_", "")
            await show_excursion_info(update, context, excursion_id)
        elif data.startswith("city_"):
            city = data.replace("city_", "")
            await show_city_weather(update, context, city)
        elif data.startswith("weekly_"):
            city = data.replace("weekly_", "")
            await show_forecast(update, context, city)
        elif data == "back_to_cities":
            await show_weather_menu(update, context)
        elif data == "back_to_current":
            city = context.user_data.get('current_city')
            if city:
                await show_city_weather(update, context, city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ {data}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 