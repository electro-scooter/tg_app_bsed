import aiohttp
from datetime import datetime, timedelta
import pytz
from config import WEATHER_API_KEY, TIMEZONE

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
WEATHER_EMOJIS = {
    '—è—Å–Ω–æ': '‚òÄÔ∏è',
    '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå§',
    '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚õÖÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå§',
    '–æ–±–ª–∞—á–Ω–æ': '‚òÅÔ∏è',
    '–ø–∞—Å–º—É—Ä–Ω–æ': 'üå•',
    '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶',
    '–¥–æ–∂–¥—å': 'üåß',
    '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å': '‚õà',
    '–≥—Ä–æ–∑–∞': 'üå©',
    '—Å–Ω–µ–≥': 'üå®',
    '—Ç—É–º–∞–Ω': 'üå´',
    'default': 'üå°'
}

def get_weather_emoji(description: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
    for key, emoji in WEATHER_EMOJIS.items():
        if key in description.lower():
            return emoji
    return WEATHER_EMOJIS['default']

async def get_weather(city: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
    async with aiohttp.ClientSession() as session:
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω—ã
            if city == "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞":
                weather_url = f"https://api.openweathermap.org/data/2.5/weather?id=542681&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                geocoding_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city},RU&limit=1&appid={WEATHER_API_KEY}"
                async with session.get(geocoding_url) as response:
                    location_data = await response.json()
                    if not location_data:
                        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    
                    lat = location_data[0]["lat"]
                    lon = location_data[0]["lon"]
                
                weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            
            async with session.get(weather_url) as response:
                weather_data = await response.json()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
                tz = pytz.timezone(TIMEZONE)
                sunrise = datetime.fromtimestamp(weather_data["sys"]["sunrise"]).astimezone(tz).strftime("%H:%M")
                sunset = datetime.fromtimestamp(weather_data["sys"]["sunset"]).astimezone(tz).strftime("%H:%M")
                
                weather_info = {
                    "temp": round(weather_data["main"]["temp"]),
                    "feels_like": round(weather_data["main"]["feels_like"]),
                    "humidity": weather_data["main"]["humidity"],
                    "pressure": round(weather_data["main"]["pressure"] * 0.750062),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –≥–ü–∞ –≤ –º–º —Ä—Ç.—Å—Ç.
                    "wind_speed": round(weather_data["wind"]["speed"]),
                    "wind_direction": get_wind_direction(weather_data["wind"]["deg"]),
                    "clouds": weather_data["clouds"]["all"],
                    "description": weather_data["weather"][0]["description"],
                    "sunrise": sunrise,
                    "sunset": sunset
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º visibility —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
                if "visibility" in weather_data:
                    weather_info["visibility"] = round(weather_data["visibility"] / 1000, 1)
                    weather_info["visibility_info"] = f"\nüëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {weather_info['visibility']} –∫–º"
                else:
                    weather_info["visibility"] = None
                    weather_info["visibility_info"] = "\nüëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                
                return weather_info
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"}

def get_wind_direction(degrees: float) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"""
    directions = [
        "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
    ]
    index = round(degrees / 45) % 8
    return directions[index]

async def get_forecast(city: str, days: int = 7) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    async with aiohttp.ClientSession() as session:
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω—ã
            if city == "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞":
                forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?id=542681&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
                geocoding_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city},RU&limit=1&appid={WEATHER_API_KEY}"
                async with session.get(geocoding_url) as response:
                    location_data = await response.json()
                    if not location_data:
                        return [{"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}]
                    
                    lat = location_data[0]["lat"]
                    lon = location_data[0]["lon"]
                
                forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            
            async with session.get(forecast_url) as response:
                forecast_data = await response.json()
                
                if "error" in forecast_data:
                    return [{"error": forecast_data["error"]}]
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º
                daily_forecast = {}
                tz = pytz.timezone(TIMEZONE)
                
                for item in forecast_data["list"]:
                    date = datetime.fromtimestamp(item["dt"]).astimezone(tz)
                    date_key = date.strftime("%Y-%m-%d")
                    
                    if date_key not in daily_forecast:
                        daily_forecast[date_key] = {
                            "date": date.strftime("%d.%m.%Y"),
                            "weekday": date.strftime("%A"),
                            "temp_min": float('inf'),
                            "temp_max": float('-inf'),
                            "descriptions": set(),
                            "emojis": set()
                        }
                    
                    temp = round(item["main"]["temp"])
                    daily_forecast[date_key]["temp_min"] = min(daily_forecast[date_key]["temp_min"], temp)
                    daily_forecast[date_key]["temp_max"] = max(daily_forecast[date_key]["temp_max"], temp)
                    daily_forecast[date_key]["descriptions"].add(item["weather"][0]["description"])
                    daily_forecast[date_key]["emojis"].add(get_weather_emoji(item["weather"][0]["description"]))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                forecast = []
                for date_key in sorted(daily_forecast.keys())[:days]:
                    day_data = daily_forecast[date_key]
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º weekday –≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    weekday_ru = {
                        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
                        'Wednesday': '–°—Ä–µ–¥–∞',
                        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                        'Saturday': '–°—É–±–±–æ—Ç–∞',
                        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                    }[day_data["weekday"]]
                    
                    forecast.append({
                        "date": day_data["date"],
                        "weekday": weekday_ru,
                        "temp_min": round(day_data["temp_min"]),
                        "temp_max": round(day_data["temp_max"]),
                        "descriptions": list(day_data["descriptions"]),
                        "weather_emojis": " ".join(day_data["emojis"])
                    })
                
                return forecast
        except Exception as e:
            return [{"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"}] 